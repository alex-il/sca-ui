<Root>
<rule name="EmptyCatchBlock" message="Avoid empty catch blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Empty Catch Block finds instances where an exception is caught,
  but nothing is done.  In most circumstances, this swallows an exception
  which should either be acted on or reported.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//CatchStatement
 [count(Block/BlockStatement) = 0]
 [FormalParameter/Type/ReferenceType
   /ClassOrInterfaceType[@Image != 'InterruptedException' and @Image != 'CloneNotSupportedException']
 ]
 ]]>
             </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public void doSomething() {
      try {
        FileInputStream fis = new FileInputStream("/tmp/bugger");
      } catch (IOException ioe) {
          // not good
      }
    }]]>
      </example>
    </rule><rule name="EmptyIfStmt" message="Avoid empty &apos;if&apos; statements" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
        <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//IfStatement/Statement/Block[count(*) = 0]]]>
              </value>
          </property>
      </properties>
      <example>
    <![CDATA[if (foo == 0) {
       // why bother checking up on foo?
    }]]>
       </example>
    </rule><rule name="EmptyWhileStmt" message="Avoid empty &apos;while&apos; statements" class="net.sourceforge.pmd.rules.XPathRule">
       <description>
  Empty While Statement finds all instances where a while statement
  does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if
  it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
                  //WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]
                  ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

       <example>
  <![CDATA[while (a == b) {
    // not good
  }]]>
       </example>
    </rule><rule name="EmptyTryBlock" message="Avoid empty try blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid empty try blocks - what's the point?
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//TryStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
      } catch (Exception e) {
          e.printStackTrace();
      }
  }]]>
      </example>
    </rule><rule name="EmptyFinallyBlock" message="Avoid empty finally blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid empty finally blocks - these can be deleted.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//FinallyStatement[count(Block/BlockStatement) = 0]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
          int x=2;
      } finally {
      }
  }]]>
      </example>
    </rule><rule name="ForLoopShouldBeWhileLoop" message="This for loop could be simplified to a while loop" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Some for loops can be simplified to while loops - this makes them more concise.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
 //ForStatement
  [count(*) > 1]
  [not(ForInit)]
  [not(ForUpdate)]
  [not(Type and Expression and Statement)]
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      void bar() {
          for (;true;) true; // No Init or Update part, may as well be: while (true)
      }
  }]]>
      </example>
    </rule><rule name="OverrideBothEqualsAndHashcode" message="Ensure you override both equals() and hashCode()" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='false']//MethodDeclarator
[(@Image = 'equals' and count(FormalParameters/*) = 1
and not(//MethodDeclarator[count(FormalParameters/*) = 0][@Image = 'hashCode']))
or
(@Image='hashCode' and count(FormalParameters/*) = 0
and
not
(//MethodDeclarator
 [count(
   FormalParameters//Type/ReferenceType/ClassOrInterfaceType
    [@Image = 'Object' or @Image = 'java.lang.Object']) = 1]
    [@Image = 'equals']))]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public class Bar {
      public boolean equals(Object o) {
          // do some comparison
      }
  }

  // and so is this
  public class Baz {
      public int hashCode() {
          // return some hash value
      }
  }

  // this is OK
  public class Foo {
      public boolean equals(Object other) {
          // do some comparison
      }
      public int hashCode() {
          // return some hash value
      }
  }]]>
      </example>
    </rule><rule name="UnnecessaryConversionTemporary" message="Avoid unnecessary temporaries when converting primitives to Strings" class="net.sourceforge.pmd.rules.UnnecessaryConversionTemporary">
      <description>
      Avoid unnecessary temporaries when converting primitives to Strings
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[public String convert(int x) {
      // this wastes an object
      String foo = new Integer(x).toString();
      // this is better
      return Integer.toString(x);
    }]]>
      </example>
    </rule><rule name="ReturnFromFinallyBlock" message="Avoid returning from a finally block" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid returning from a finally block - this can discard exceptions.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
 //FinallyStatement//ReturnStatement
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public class Bar {
 public String bugga() {
  try {
   throw new Exception( "My Exception" );
  } catch (Exception e) {
   throw e;
  } finally {
   return "A. O. K."; // Very bad.
  }
 }
}]]>
      </example>
    </rule><rule name="EmptySynchronizedBlock" message="Avoid empty synchronized blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid empty synchronized blocks - they're useless.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//SynchronizedStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      synchronized (this) {}
  }]]>
      </example>
    </rule><rule name="AvoidCatchingThrowable" message="A catch statement should never catch throwable since it includes errors" class="net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable">
      <description>
This is dangerous because if a java.lang.Error, for example OutOfMemmoryError,
occurs then it will be caught. The container should handle java.lang.Error.
If application code will catch them, try to log them (which will probably fail)
and continue silently the situation will not be desirable.
      </description>
      <priority>3</priority>
      <example>
                <![CDATA[
SimpleDateFormat sdf = null;
try {
    sdf = new SimpleDateFormat("yyyy-MM-dd");
} catch (Throwable th) {  //Should not catch throwable
    th.printStackTrace();
}
                ]]>
      </example>
    </rule><rule name="SignatureDeclareThrowsException" message="A signature (constructor or method) shouldn&apos;t have Exception in throws declaration" class="net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration">
      <description>
It is unclear which exceptions that can be thrown from the methods.
It might be difficult to document and understand the vague interfaces.
Use either a class derived from RuntimeException or a checked exception.
      </description>
      <priority>3</priority>
      <example>
                <![CDATA[
public void methodThrowingException() throws Exception {
}
                ]]>
      </example>
    </rule><rule name="ExceptionTypeChecking" message="The catch clause shouldn&apos;t check the exception type - catch several exceptions instead" class="net.sourceforge.pmd.rules.strictexception.ExceptionTypeChecking">
      <description>
At some places Exception is caught and then a check with instanceof is performed.
This result in messy code. It's considered better to catch all the specific
exceptions instead.
      </description>
      <priority>3</priority>
      <example>
                <![CDATA[
SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
try {
    returnString = sdf.format(value);
} catch (Exception ex) {
    /* BAD STUFF !!!*/
    if (ex instanceof NumberFormatException) {
        System.out.println("NumberFormat exception!!!");
    }
    if (ex instanceof IllegalArgumentException) {
        System.out.println("illegal argument...!!!");
    }
}
                ]]>
      </example>
    </rule><rule name="ExceptionAsFlowControl" message="Avoid using exceptions as flow control" class="net.sourceforge.pmd.rules.design.ExceptionAsFlowControl">
      <description>
          Using Exceptions as flow control leads to GOTOish code.
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[
  public class Foo {
   void bar() {
    try {
     try {
     } catch (Exception e) {
      throw new WrapperException(e);
      // this is essentially a GOTO to the WrapperException catch block
     }
    } catch (WrapperException e) {
     // do some more stuff
    }
   }
  }
  ]]>
      </example>
    </rule><rule name="AvoidCatchingNPE" message="Avoid catching NullPointerException; consider removing the cause of the NPE." class="net.sourceforge.pmd.rules.XPathRule">
    <description>
      Code should never throw NPE under normal circumstances.  A catch block may hide the original error, causing other more subtle errors in its wake.
    </description>
    <example>  <![CDATA[
try {
  ...
} catch (NullPointerException npe) {
  ...
}
]]>
         </example>
    <priority> 3 </priority>
    <properties>
      <property name="xpath">
        <value>
            <![CDATA[
//CatchStatement/FormalParameter/Type
 /ReferenceType/ClassOrInterfaceType[@Image='NullPointerException']
 ]]>
        </value>
      </property>
    </properties>
  </rule><rule name="AvoidThrowingRawExceptionTypes" message="Avoid throwing raw exception types" class="net.sourceforge.pmd.rules.XPathRule">
    <description>
Avoid throwing certain exception types.  Rather than throw a raw RuntimeException, Throwable,
 Exception, or Error, use a subclassed exception or error instead.
    </description>
 <example>
      <![CDATA[
throw new Exception();
]]>
    </example>
    <priority> 1 </priority>
    <properties>
      <property name="xpath">
        <value>
            <![CDATA[
//AllocationExpression
 /ClassOrInterfaceType[
 @Image='Throwable' |
 @Image='Exception' |
 @Image='Error' |
 @Image='RuntimeException']
 ]]>
        </value>
      </property>
    </properties>
  </rule><rule name="AvoidThrowingNullPointerException" message="Avoid throwing null pointer exceptions" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
Avoid throwing a NullPointerException - it's confusing because most people will assume that the
   VM threw NPE.  Consider using InvalidArgumentException("Null parameter") which will be clearly seen as
  a programmer initiated exception..  Use IllegalArgumentException or IllegalStateException instead.
      </description>
   <example>
        <![CDATA[
  throw new NullPointerException();
  ]]>
      </example>
      <priority> 1 </priority>
      <properties>
        <property name="xpath">
          <value>
              <![CDATA[
  //AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']
   ]]>
          </value>
        </property>
      </properties>
    </rule><rule name="StringInstantiation" message="Avoid instantiating String objects; this is usually unnecessary." class="net.sourceforge.pmd.rules.XPathRule">
    <description>
    Avoid instantiating String objects; this is usually unnecessary.
    </description>
       <properties>
           <property name="xpath">
               <value>
                   <![CDATA[
    //AllocationExpression[ClassOrInterfaceType/@Image='String'][count(.//Expression) < 2][not(ArrayDimsAndInits)]
                    ]]>
               </value>
           </property>
       </properties>
       <priority>2</priority>

    <example>
<![CDATA[
public class Foo {
 private String bar = new String("bar"); // just do a String bar = "bar";
}
]]>
    </example>
    </rule><rule name="StringToString" message="Avoid calling toString() on String objects; this is unnecessary" class="net.sourceforge.pmd.rules.StringToStringRule">
    <description>
    Avoid calling toString() on String objects; this is unnecessary
    </description>
       <priority>3</priority>

    <example>
<![CDATA[
public class Foo {
 private String baz() {
  String bar = "howdy";
  return bar.toString();
 }
}
]]>
    </example>
    </rule><rule name="AvoidConcatenatingNonLiteralsInStringBuffer" message="Avoid concatenating non literals in a StringBuffer constructor or append()" class="net.sourceforge.pmd.rules.AvoidConcatenatingNonLiteralsInStringBuffer">
    <description>
    Avoid concatenating non literals in a StringBuffer constructor or append().
    </description>
       <priority>2</priority>

    <example>
<![CDATA[

// Avoid this 
StringBuffer sb=new
StringBuffer("AAAAAAAAAA"+System.getProperty("java.io.tmpdir"));

// use instead something like this
StringBuffer sb = new StringBuffer("AAAAAAAAAA");
sb.append(System.getProperty("java.io.tmpdir"));

]]>
    </example>
    </rule><rule name="UnusedPrivateField" message="Avoid unused private fields such as &apos;&apos;{0}&apos;&apos;" class="net.sourceforge.pmd.rules.UnusedPrivateFieldRule">
    <description>
Detects when a private field is declared and/or assigned a value, but not used.
    </description>
      <priority>3</priority>
    <example>
<![CDATA[
public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}
]]>
    </example>
  </rule><rule name="UnusedLocalVariable" message="Avoid unused local variables such as &apos;&apos;{0}&apos;&apos;" class="net.sourceforge.pmd.rules.UnusedLocalVariableRule">
    <description>
Detects when a local variable is declared and/or assigned, but not used.
    </description>
    <priority>3</priority>

    <example>
<![CDATA[
public void doSomething() {
  int i = 5; // Unused
}
]]>
    </example>
  </rule><rule name="UnusedPrivateMethod" message="Avoid unused private methods such as &apos;&apos;{0}&apos;&apos;" class="net.sourceforge.pmd.rules.UnusedPrivateMethodRule">
    <description>
Unused Private Method detects when a private method is declared but is unused.
    </description>
        <priority>3</priority>
    <example>
<![CDATA[
public class Something {
 private void foo() {} // unused
}
]]>
    </example>
  </rule><rule name="UnusedFormalParameter" message="Avoid unused formal parameters such as &apos;&apos;{0}&apos;&apos;" class="net.sourceforge.pmd.rules.UnusedFormalParameterRule">
    <description>
Avoid passing parameters to methods and then not using those parameters.
    </description>
      <priority>3</priority>

    <example>
<![CDATA[
public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }
]]>
    </example>
  </rule><rule name="UseSingleton" message="All methods are static.  Consider using Singleton instead.  Alternatively, you could add a private constructor or make the class abstract to silence this warning." class="net.sourceforge.pmd.rules.design.UseSingleton">
    <description>
    If you have a class that has nothing but static methods, consider making it a Singleton.
        Note that this doesn't apply to abstract classes, since their subclasses may
        well include non-static methods.  Also, if you want this class to be a Singleton,
        remember to add a private constructor to prevent instantiation.
    </description>
      <priority>3</priority>

    <example>
<![CDATA[
public class MaybeASingleton {
    public static void foo() {
     // etc
    }
    public static void bar() {
     // etc
    }
}
]]>
    </example>
  </rule><rule name="SimplifyBooleanReturns" message="Avoid unnecessary if..then..else statements when returning a boolean" class="net.sourceforge.pmd.rules.SimplifyBooleanReturns">
    <description>
Avoid unnecessary if..then..else statements when returning a boolean
    </description>
      <priority>3</priority>
    <example>
<![CDATA[
public class Foo {
  private int bar =2;
  public boolean isBarEqualsTo(int x) {
    // this bit of code
    if (bar == x) {
     return true;
    } else {
     return false;
    }
    // can be replaced with a simple
    // return bar == x;
  }
}
]]>
    </example>
  </rule><rule name="SimplifyBooleanExpressions" message="Avoid unnecessary comparisons in boolean expressions" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid unnecessary comparisons in boolean expressions - this makes simple code seem complicated.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//EqualityExpression/PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral
]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
public class Bar {
 // can be simplified to
 // bar = isFoo();
 private boolean bar = (isFoo() == true);

 public isFoo() { return false;}
}
  ]]>
      </example>
    </rule><rule name="InstantiationToGetClass" message="Avoid instantiating an object just to call getClass() on it; use the .class public member instead" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
Avoid instantiating an object just to call getClass() on it; use the .class public member instead
      </description>
        <example>
    <![CDATA[
class Foo {
 Class c = new String().getClass();
}
    ]]>
        </example>
        <priority>4</priority>
        <properties>
          <property name="xpath">
            <value>
                <![CDATA[
//PrimarySuffix
 [@Image='getClass']
 [parent::PrimaryExpression
  [PrimaryPrefix/AllocationExpression]
  [count(PrimarySuffix) = 2]
 ]
     ]]>
            </value>
          </property>
        </properties>
      </rule><rule name="JumbledIncrementer" message="Avoid modifying an outer loop incrementer in an inner loop for update expression" class="net.sourceforge.pmd.rules.XPathRule">
     <description>
     Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.
     </description>
     <properties>
         <property name="xpath">
             <value>
 <![CDATA[//ForStatement
 [
  ForUpdate/StatementExpressionList/StatementExpression/PostfixExpression/PrimaryExpression/PrimaryPrefix/Name/@Image
  =
  ancestor::ForStatement/ForInit//VariableDeclaratorId/@Image
 ]]]>
             </value>
         </property>
     </properties>
        <priority>3</priority>

     <example>
 <![CDATA[public class JumbledIncrementerRule1 {
  public void foo() {
   for (int i = 0; i < 10; i++) {
    for (int k = 0; k < 20; i++) {
     System.out.println("Hello");
    }
   }
  }
 }]]>
     </example>
     </rule><rule name="AvoidInstantiatingObjectsInLoops" message="Avoid instantiating new objects inside loops" class="net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops">
    <description>
Detects when a new object is created inside a loop
    </description>
      <priority>3</priority>
    <example>
<![CDATA[
public class Something {
  public static void main( String as[] ) {  
    for (int i = 0; i < 10; i++) {
      Foo f = new Foo(); //Avoid this whenever you can it's really expensive
    }
  }
}
]]>
    </example>
  </rule>
<rule name="CyclomaticComplexity" message="The {0} &apos;&apos;{1}&apos;&apos; has a Cyclomatic Complexity of {2}." class="net.sourceforge.pmd.rules.CyclomaticComplexity">
   <description>
Complexity is determined by the number of decision points in a method plus one for the
method entry.  The decision points are 'if', 'while', 'for', and 'case labels'.  Scale:
1-4 (low complexity)   5-7 (moderate complexity)   8-10 (high complexity)   10+ (very high complexity)
   </description>
   <priority>3</priority>
   <properties>
      <property name="reportLevel" value="4" />
   </properties>
   <example>
   </example>
</rule>
  
  </Root>