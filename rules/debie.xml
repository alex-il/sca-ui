<Root><rule name="EmptyCatchBlock" message="Avoid empty catch blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Empty Catch Block finds instances where an exception is caught,
  but nothing is done.  In most circumstances, this swallows an exception
  which should either be acted on or reported.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//CatchStatement
 [count(Block/BlockStatement) = 0]
 [FormalParameter/Type/ReferenceType
   /ClassOrInterfaceType[@Image != 'InterruptedException' and @Image != 'CloneNotSupportedException']
 ]
 ]]>
             </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public void doSomething() {
      try {
        FileInputStream fis = new FileInputStream("/tmp/bugger");
      } catch (IOException ioe) {
          // not good
      }
    }]]>
      </example>
    </rule><rule name="EmptyIfStmt" message="Avoid empty &apos;if&apos; statements" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
        <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//IfStatement/Statement/Block[count(*) = 0]]]>
              </value>
          </property>
      </properties>
      <example>
    <![CDATA[if (foo == 0) {
       // why bother checking up on foo?
    }]]>
       </example>
    </rule><rule name="EmptyWhileStmt" message="Avoid empty &apos;while&apos; statements" class="net.sourceforge.pmd.rules.XPathRule">
       <description>
  Empty While Statement finds all instances where a while statement
  does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if
  it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
                  //WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]
                  ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

       <example>
  <![CDATA[while (a == b) {
    // not good
  }]]>
       </example>
    </rule><rule name="EmptyTryBlock" message="Avoid empty try blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid empty try blocks - what's the point?
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//TryStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
      } catch (Exception e) {
          e.printStackTrace();
      }
  }]]>
      </example>
    </rule><rule name="EmptyFinallyBlock" message="Avoid empty finally blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid empty finally blocks - these can be deleted.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//FinallyStatement[count(Block/BlockStatement) = 0]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
          int x=2;
      } finally {
      }
  }]]>
      </example>
    </rule><rule name="EmptySwitchStatements" message="Avoid empty switch statements" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Avoid empty switch statements.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//SwitchStatement[count(*) = 1]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public class Foo {
   public void bar() {
    int x = 2;
    switch (x) {
     // once there was code here
     // but it's been commented out or something
    }
   }
  }]]>
      </example>
      </rule><rule name="JumbledIncrementer" message="Avoid modifying an outer loop incrementer in an inner loop for update expression" class="net.sourceforge.pmd.rules.XPathRule">
     <description>
     Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.
     </description>
     <properties>
         <property name="xpath">
             <value>
 <![CDATA[//ForStatement
 [
  ForUpdate/StatementExpressionList/StatementExpression/PostfixExpression/PrimaryExpression/PrimaryPrefix/Name/@Image
  =
  ancestor::ForStatement/ForInit//VariableDeclaratorId/@Image
 ]]]>
             </value>
         </property>
     </properties>
        <priority>3</priority>

     <example>
 <![CDATA[public class JumbledIncrementerRule1 {
  public void foo() {
   for (int i = 0; i < 10; i++) {
    for (int k = 0; k < 20; i++) {
     System.out.println("Hello");
    }
   }
  }
 }]]>
     </example>
     </rule><rule name="ForLoopShouldBeWhileLoop" message="This for loop could be simplified to a while loop" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Some for loops can be simplified to while loops - this makes them more concise.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
 //ForStatement
  [count(*) > 1]
  [not(ForInit)]
  [not(ForUpdate)]
  [not(Type and Expression and Statement)]
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      void bar() {
          for (;true;) true; // No Init or Update part, may as well be: while (true)
      }
  }]]>
      </example>
    </rule><rule name="UnnecessaryConversionTemporary" message="Avoid unnecessary temporaries when converting primitives to Strings" class="net.sourceforge.pmd.rules.UnnecessaryConversionTemporary">
      <description>
      Avoid unnecessary temporaries when converting primitives to Strings
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[public String convert(int x) {
      // this wastes an object
      String foo = new Integer(x).toString();
      // this is better
      return Integer.toString(x);
    }]]>
      </example>
    </rule><rule name="OverrideBothEqualsAndHashcode" message="Ensure you override both equals() and hashCode()" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='false']//MethodDeclarator
[(@Image = 'equals' and count(FormalParameters/*) = 1
and not(//MethodDeclarator[count(FormalParameters/*) = 0][@Image = 'hashCode']))
or
(@Image='hashCode' and count(FormalParameters/*) = 0
and
not
(//MethodDeclarator
 [count(
   FormalParameters//Type/ReferenceType/ClassOrInterfaceType
    [@Image = 'Object' or @Image = 'java.lang.Object']) = 1]
    [@Image = 'equals']))]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public class Bar {
      public boolean equals(Object o) {
          // do some comparison
      }
  }

  // and so is this
  public class Baz {
      public int hashCode() {
          // return some hash value
      }
  }

  // this is OK
  public class Foo {
      public boolean equals(Object other) {
          // do some comparison
      }
      public int hashCode() {
          // return some hash value
      }
  }]]>
      </example>
    </rule><rule name="DoubleCheckedLocking" message="Double checked locking is not thread safe in Java." class="net.sourceforge.pmd.rules.DoubleCheckedLocking">
      <description>
      Partially created objects can be returned by the Double Checked Locking pattern when used in Java.
      An optimizing JRE may assign a reference to the baz variable before it creates the object the
          reference is intended to point to.  For more details see http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html.
      </description>
        <priority>1</priority>
      <example>
  <![CDATA[public class Foo {
      Object baz;
      Object bar() {
        if(baz == null) { //baz may be non-null yet not fully created
          synchronized(this){
            if(baz == null){
              baz = new Object();
            }
          }
        }
        return baz;
      }
  }]]>
      </example>
    </rule><rule name="ReturnFromFinallyBlock" message="Avoid returning from a finally block" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid returning from a finally block - this can discard exceptions.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
 //FinallyStatement//ReturnStatement
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[public class Bar {
 public String bugga() {
  try {
   throw new Exception( "My Exception" );
  } catch (Exception e) {
   throw e;
  } finally {
   return "A. O. K."; // Very bad.
  }
 }
}]]>
      </example>
    </rule><rule name="EmptySynchronizedBlock" message="Avoid empty synchronized blocks" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid empty synchronized blocks - they're useless.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//SynchronizedStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      synchronized (this) {}
  }]]>
      </example>
    </rule><rule name="UnnecessaryReturn" message="Avoid unnecessary return statements" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid unnecessary return statements
      </description>
      <properties>
          <property name="xpath">
              <value>
 <![CDATA[//ReturnStatement
 [parent::Statement
  [parent::BlockStatement
   [parent::Block
    [parent::MethodDeclaration/ResultType[@Void='true']
    ]
   ]
  ] ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[// this is bad
  public void bar() {
      int x = 42;
      return;
  }]]>
      </example>
    </rule><rule name="EmptyStaticInitializer" message="Empty static initializer was found" class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       An empty static initializer was found.
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[//ClassOrInterfaceBodyDeclaration/Initializer[@Static='true']/Block[count(*)=0]]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[public class Foo {
  // why are there no statements in this static block?
  static {}
 }]]>
       </example>
     </rule><rule name="UnconditionalIfStatement" message="Do not use &apos;if&apos; statements that are always true or always false" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Do not use "if" statements that are always true or always false.
      </description>
        <properties>
            <property name="xpath">
                <value>
 <![CDATA[//IfStatement/Expression
 [count(PrimaryExpression)=1]
 /PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
 public void close() {
  if (true) {
       // ...
   }
 }
}]]>
      </example>
    </rule><rule name="EmptyStatementNotInLoop" message="An empty statement (semicolon) not part of a loop" class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       An empty statement (aka a semicolon by itself) that is not used
       as the sole body of a for loop or while loop is probably a bug.  It
       could also be a double semicolon, which is useless and should be
       removed.
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
//Statement/EmptyStatement
 [not(
       ../../../ForStatement
       or ../../../WhileStatement
       or ../../../BlockStatement/ClassOrInterfaceDeclaration
       or ../../../../../../ForStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement
       or ../../../../../../WhileStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement)
 ]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
<![CDATA[public class MyClass {
   public void doit()
   {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println("look at the extra semicolon");;
   }
}]]>
       </example>
     </rule><rule name="BooleanInstantiation" message="Avoid instantiating Boolean objects; you can usually invoke Boolean.TRUE instead." class="net.sourceforge.pmd.rules.XPathRule">
   <description>
   Avoid instantiating Boolean objects, instead use Boolean.TRUE or Boolean.FALSE.
   </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//PrimaryExpression
[
PrimaryPrefix/AllocationExpression[not (ArrayDimsAndInits) and (ClassOrInterfaceType/@Image='Boolean' or ClassOrInterfaceType/@Image='java.lang.Boolean')]
or
(
PrimaryPrefix/Name[@Image='Boolean.valueOf']
and
PrimarySuffix/Arguments//BooleanLiteral
)
]
]]>
              </value>
          </property>
      </properties>
      <priority>2</priority>
   <example>
   <![CDATA[
public class Foo {
 private Boolean bar = new Boolean("true"); // just do a Boolean bar = Boolean.TRUE;
}
   ]]>
   </example>
   </rule><rule name="UnnecessaryFinalModifier" message="Unnecessary final modifier in final class" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  When a class has the final modifier, all the methods are marked finally.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//ClassOrInterfaceDeclaration[@Final='true' and @Interface='false']
/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Final='true']
    ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
<![CDATA[
public final class Foo {

    // This final modifier is not necessary, since the class is final
    // and thus, all methods are final
	private final void foo() {
	}

}

]]>
      </example>
    </rule><rule name="CollapsibleIfStatements" message="These nested if statements could be combined" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//IfStatement[@Else='false']/Statement
 /IfStatement[@Else='false']
 |
//IfStatement[@Else='false']/Statement
 /Block[count(BlockStatement)=1]/BlockStatement
  /Statement/IfStatement[@Else='false']]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      void bar() {
          if (x) {
           if (y) {
             // do stuff
           }
          }
      }
  }]]>
      </example>
    </rule><rule name="IfStmtsMustUseBraces" message="Avoid using if statements without curly braces" class="net.sourceforge.pmd.rules.XPathRule">
     <description>
     Avoid using if statements without using curly braces
     </description>
       <properties>
           <property name="xpath">
               <value>
                   <![CDATA[
    //IfStatement[count(*) < 3][not(Statement/Block)]
                   ]]>
               </value>
           </property>
       </properties>
       <priority>3</priority>

     <example>
 <![CDATA[
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 ]]>
     </example>
     </rule><rule name="WhileLoopsMustUseBraces" message="Avoid using &apos;while&apos; statements without curly braces" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Avoid using 'while' statements without using curly braces
      </description>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
    //WhileStatement[not(Statement/Block)]
                    ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
    public void doSomething() {
      while (true)
          x++;
    }
  ]]>
      </example>
    </rule><rule name="IfElseStmtsMustUseBraces" message="Avoid using &apos;if...else&apos; statements without curly braces" class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       Avoid using if..else statements without using curly braces
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[
//Statement
 [parent::IfStatement[@Else='true']]
 [not(child::Block)]
 [not(child::IfStatement)]
 ]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>

       <example>
   <![CDATA[

     public void doSomething() {
       // this is OK
       if (foo) x++;

       // but this is not
       if (foo)
           x=x+1;
       else
           x=x-1;
     }
   ]]>
       </example>
     </rule><rule name="ForLoopsMustUseBraces" message="Avoid using &apos;for&apos; statements without curly braces" class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       Avoid using 'for' statements without using curly braces
       </description>
         <properties>
             <property name="xpath">
                 <value>
                     <![CDATA[
    //ForStatement[not(Statement/Block)]
                     ]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>

       <example>
   <![CDATA[
     public void foo() {
       for (int i=0; i<42;i++)
           foo();
     }
   ]]>
       </example>
     </rule><rule name="UnnecessaryConstructor" message="Avoid unnecessary constructors - the compiler will generate these for you" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Unnecessary constructor detects when a constructor is not necessary; i.e., when there's only one constructor,
  it's public, has an empty body, and takes no arguments.
      </description>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//ClassOrInterfaceDeclaration
/ClassOrInterfaceBody[count(ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)=1]
/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration
[@Public='true']
[not(FormalParameters/*)]
[not(BlockStatement)]
[not(NameList)]
[count(ExplicitConstructorInvocation/Arguments/ArgumentList/Expression)=0]
                    ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
      <example>
  <![CDATA[
  public class Foo {
   public Foo() {}
  }
  ]]>
      </example>
    </rule><rule name="NullAssignment" message="Assigning an Object to null is a code smell.  Consider refactoring." class="net.sourceforge.pmd.rules.design.NullAssignmentRule">
      <description>
 Assigning a "null" to a variable (outside of its declaration) is usually in
 bad form.  Some times, the assignment is an indication that the programmer doesn't
 completely understand what is going on in the code.  NOTE: This sort of assignment
 may in rare cases be useful to encourage garbage collection.  If that's what you're using
 it for, by all means, disregard this rule :-)
      </description>
        <priority>3</priority>
      <example>
 <![CDATA[
 public class Foo {
   public void bar() {
     Object x = null; // This is OK.
     x = new Object();
     // Big, complex piece of code here.
     x = null; // This is BAD.
     // Big, complex piece of code here.
   }
 }

 ]]>
      </example>
    </rule><rule name="OnlyOneReturn" message="A method should have only one exit point, and that should be the last statement in the method" class="net.sourceforge.pmd.rules.design.OnlyOneReturnRule">
     <description>
     A method should have only one exit point, and that should be the last statement in the method.
     </description>
        <priority>3</priority>

     <example>
 <![CDATA[
 public class OneReturnOnly1 {
  public void foo(int x) {
   if (x > 0) {
    return "hey";   // oops, multiple exit points!
   }
   return "hi";
  }
 }
 ]]>
     </example>
     </rule><rule name="CallSuperInConstructor" message="It is a good practice to call super() in a constructor" class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      It is a good practice to call super() in a constructor. If super() is not called
      but another constructor, such as an overloaded constructor, of the class is called, this rule
      will not report it.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//ConstructorDeclaration[
count(.//ExplicitConstructorInvocation)=0
]
    ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
<![CDATA[
public class Foo extends Bar{

	public Foo() {
		// call the constructor of Bar
		super();
	}

	public Foo(int code) {
		// do something with code
		this();
		// no problem with this
	}
}
]]>
      </example>
    </rule><rule name="CouplingBetweenObjects" message="High amount of different objects as memebers donotes a high coupling" class="net.sourceforge.pmd.rules.CouplingBetweenObjects">
    <description>
        Rule counts unique attributes, local variables and return types within an object. An amount
        higher than specified threshold can indicate a high degree of couping with in an object
    </description>
    <priority>3</priority>
    <properties>
      <property name="threshold" value="20" />
    </properties>
    <example>
    <![CDATA[
      import com.Blah;
      import org.Bar;
      import org.Bardo;
      //
      public class Foo {
        private Blah var1;
        private Bar var2;
        //followed by many imports of unique objects

        void ObjectC doWork() {
           Bardo var55;
           ObjectA var44;
           ObjectZ var93;
           return something;
        }

        }
        ]]>
    </example>
  </rule><rule name="ExcessiveImports" message="A high number of imports can indicate a high degree of coupling within an object." class="net.sourceforge.pmd.rules.ExcessiveImports">
     <description>
      A high number of imports can indicate a high degree of coupling within
      an object. Rule counts the number of unique imports and reports a violation
      if the count is above the user defined threshold.
  </description>
  <priority>3</priority>
  <properties>
      <property name="minimum" value="30" />
  </properties>
  <example>
      <![CDATA[
      import blah.blah.Bardo;
      import blah.blah.Hardo;
      import blah.blah.Bar;
      import blah.net.ObjectA;
      //imports over some threshold
      public class Foo {
        public void doWork() {}
      }
      ]]>
  </example>

   </rule><rule name="LooseCoupling" message="Avoid using implementation types like &apos;&apos;{0}&apos;&apos;; use the interface instead" class="net.sourceforge.pmd.rules.design.LooseCoupling">
      <description>
      Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead
      </description>
        <priority>3</priority>

      <example>
  <![CDATA[
  import java.util.*;
  public class Bar {

   // should be "private List list"
   private ArrayList list = new ArrayList();

   // should be "public Set getFoo()"
   public HashSet getFoo() {
    return new HashSet();
   }
  }

  ]]>
      </example>
    </rule><rule name="AvoidDuplicateLiterals" message="The String literal {0} appears {1} times in this file; the first occurrence is on line {2}" class="net.sourceforge.pmd.rules.AvoidDuplicateLiteralsRule">
    <description>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    </description>
        <priority>3</priority>
   <properties>
    <property name="threshold" value="4" />
   </properties>
    <example>
<![CDATA[
public class Foo {
 private void bar() {
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
 }
 private void buz(String x) {}
}
]]>
    </example>
  </rule><rule name="StringInstantiation" message="Avoid instantiating String objects; this is usually unnecessary." class="net.sourceforge.pmd.rules.XPathRule">
    <description>
    Avoid instantiating String objects; this is usually unnecessary.
    </description>
       <properties>
           <property name="xpath">
               <value>
                   <![CDATA[
    //AllocationExpression[ClassOrInterfaceType/@Image='String'][count(.//Expression) < 2][not(ArrayDimsAndInits)]
                    ]]>
               </value>
           </property>
       </properties>
       <priority>2</priority>

    <example>
<![CDATA[
public class Foo {
 private String bar = new String("bar"); // just do a String bar = "bar";
}
]]>
    </example>
    </rule><rule name="StringToString" message="Avoid calling toString() on String objects; this is unnecessary" class="net.sourceforge.pmd.rules.StringToStringRule">
    <description>
    Avoid calling toString() on String objects; this is unnecessary
    </description>
       <priority>3</priority>

    <example>
<![CDATA[
public class Foo {
 private String baz() {
  String bar = "howdy";
  return bar.toString();
 }
}
]]>
    </example>
    </rule><rule name="AvoidConcatenatingNonLiteralsInStringBuffer" message="Avoid concatenating non literals in a StringBuffer constructor or append()" class="net.sourceforge.pmd.rules.AvoidConcatenatingNonLiteralsInStringBuffer">
    <description>
    Avoid concatenating non literals in a StringBuffer constructor or append().
    </description>
       <priority>2</priority>

    <example>
<![CDATA[

// Avoid this 
StringBuffer sb=new
StringBuffer("AAAAAAAAAA"+System.getProperty("java.io.tmpdir"));

// use instead something like this
StringBuffer sb = new StringBuffer("AAAAAAAAAA");
sb.append(System.getProperty("java.io.tmpdir"));

]]>
    </example>
    </rule></Root>